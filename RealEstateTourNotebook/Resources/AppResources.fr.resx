<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ResourceFlowDirection" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>Controls the FlowDirection for all elements in the RootFrame. Set to the traditional direction of this resource file's language</comment>
  </data>
  <data name="ResourceLanguage" xml:space="preserve">
    <value>fr</value>
    <comment>Controls the Language and ensures that the font for all elements in the RootFrame aligns with the app's language. Set to the language code of this resource file's language.</comment>
  </data>
  <data name="NewTour" xml:space="preserve">
    <value>Nouvelle visite</value>
  </data>
  <data name="ListTour" xml:space="preserve">
    <value>Mes visites</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>tableau de bord</value>
  </data>
  <data name="OwnerName" xml:space="preserve">
    <value>Nom du propriétaire (ou de l'agence)</value>
  </data>
  <data name="Adress" xml:space="preserve">
    <value>Adresse</value>
  </data>
  <data name="DateTour" xml:space="preserve">
    <value>Date de visite</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Sauvegarder</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Annuler</value>
  </data>
  <data name="EstateType" xml:space="preserve">
    <value>Type de propriété</value>
  </data>
  <data name="EditTour" xml:space="preserve">
    <value>Modifier la visite</value>
  </data>
  <data name="Purpose" xml:space="preserve">
    <value>But de la visite</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Détails</value>
  </data>
  <data name="Rent" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="BuyForInvestment" xml:space="preserve">
    <value>Investissement locatif</value>
  </data>
  <data name="BuyForHome" xml:space="preserve">
    <value>Résidence principale</value>
  </data>
  <data name="PhoneNumber" xml:space="preserve">
    <value>Numéro de téléphone</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Paramètres</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Modifier</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="SelectTour" xml:space="preserve">
    <value>sélectionner</value>
  </data>
  <data name="Filtrer" xml:space="preserve">
    <value>filtrer</value>
  </data>
  <data name="FilterBy" xml:space="preserve">
    <value>Filtrer par : </value>
  </data>
  <data name="ApplicationTitle" xml:space="preserve">
    <value>Carnet de visites</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Chargement...</value>
  </data>
  <data name="ChoosePicture" xml:space="preserve">
    <value>Choisir photo</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Prix</value>
  </data>
  <data name="Compare" xml:space="preserve">
    <value>Comparer</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>À propos</value>
  </data>
  <data name="RateApp" xml:space="preserve">
    <value>Évaluer l'application</value>
  </data>
  <data name="AboutText" xml:space="preserve">
    <value>Carnet de visites est un support indispensable à vos visites immobilières. Lorsque vous effectuez une visite, vous pouvez noter des points qui vous semblent intéressants et par la suite vous pouvez comparer les différentes visites pour trouver la meilleure.

John-William Forcier</value>
  </data>
  <data name="Apartment" xml:space="preserve">
    <value>Appartement</value>
  </data>
  <data name="House" xml:space="preserve">
    <value>Maison</value>
  </data>
  <data name="HoldFinger" xml:space="preserve">
    <value>Tenir le doigt enfoncé sur la carte pour localiser l'endroit</value>
  </data>
  <data name="MyTour" xml:space="preserve">
    <value>Ma visite</value>
  </data>
  <data name="AllEstateType" xml:space="preserve">
    <value>Tous</value>
  </data>
  <data name="AllTourType" xml:space="preserve">
    <value>Tous</value>
  </data>
  <data name="ApplyFilter" xml:space="preserve">
    <value>Appliquer le filtre</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Langue</value>
  </data>
  <data name="fr" xml:space="preserve">
    <value>Français</value>
  </data>
  <data name="en" xml:space="preserve">
    <value>Anglais</value>
  </data>
  <data name="PerMonth" xml:space="preserve">
    <value>/ Mois</value>
  </data>
  <data name="MyChecklist" xml:space="preserve">
    <value>Ma liste de contrôle</value>
  </data>
  <data name="MyPosition" xml:space="preserve">
    <value>Ma position</value>
  </data>
  <data name="GoTo" xml:space="preserve">
    <value>Se rendre...</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Avertissement</value>
  </data>
  <data name="InvalideSearch" xml:space="preserve">
    <value>Aucuns résultats pour : {0}</value>
  </data>
  <data name="YearBuilt" xml:space="preserve">
    <value>Année de construction</value>
  </data>
  <data name="Repairs" xml:space="preserve">
    <value>Réparations</value>
  </data>
  <data name="Neighborhood" xml:space="preserve">
    <value>Qualité du voisinage (bruit, traffic, parking, animaux, etc)</value>
  </data>
  <data name="NearOf" xml:space="preserve">
    <value>Près de : </value>
  </data>
  <data name="Light" xml:space="preserve">
    <value>Éclairage / Ambiance</value>
  </data>
  <data name="Land" xml:space="preserve">
    <value>Terrain</value>
  </data>
  <data name="HeatingPrice" xml:space="preserve">
    <value>Prix du chauffage</value>
  </data>
  <data name="LocationError" xml:space="preserve">
    <value>Votre localisation doit être activé.</value>
  </data>
  <data name="AddRecentRepair" xml:space="preserve">
    <value>rénovations récentes</value>
  </data>
  <data name="AddRepairs" xml:space="preserve">
    <value>réparations à faire</value>
  </data>
  <data name="AddNear" xml:space="preserve">
    <value>place</value>
  </data>
  <data name="RestartApp" xml:space="preserve">
    <value>Un redémarrage est nécessaire</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Enlever</value>
  </data>
  <data name="OtherPictures" xml:space="preserve">
    <value>Autres photos</value>
  </data>
  <data name="OtherNotes" xml:space="preserve">
    <value>Autres notes</value>
  </data>
  <data name="UnitMeasurement" xml:space="preserve">
    <value>Unité de dimension</value>
  </data>
  <data name="UnitDistance" xml:space="preserve">
    <value>Unité de distance</value>
  </data>
  <data name="Currency" xml:space="preserve">
    <value>Monnaie</value>
  </data>
  <data name="FootSquare" xml:space="preserve">
    <value>pi2</value>
  </data>
  <data name="TODO" xml:space="preserve">
    <value>À faire : </value>
  </data>
  <data name="Recent" xml:space="preserve">
    <value>Récente</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nom</value>
  </data>
</root>